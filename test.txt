allow_posix_link_time_opt
    Current value (from the default) = false
      From //build/toolchain/toolchain.gni:16

    Enable Link Time Optimization in optimized builds (output programs run
    faster, but linking is up to 5-20x slower).
    Note: use target_os == "linux" rather than is_linux so that it does not
    apply to host_toolchain when target_os="android".

android_default_version_code
    Current value (from the default) = "1"
      From //build/config/android/config.gni:99

    Android versionCode for android_apk()s that don't expclitly set one.

android_default_version_name
    Current value (from the default) = "Developer Build"
      From //build/config/android/config.gni:102

    Android versionName for android_apk()s that don't expclitly set one.

android_full_debug
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:32

    Normally, Android builds are lightly optimized, even for debug builds, to
    keep binary size down. Setting this flag to true disables such optimization

android_keystore_name
    Current value (from the default) = "chromiumdebugkey"
      From //build/config/android/config.gni:108

    The name of the keystore to use for signing builds.

android_keystore_password
    Current value (from the default) = "chromium"
      From //build/config/android/config.gni:111

    The password for the keystore to use for signing builds.

android_keystore_path
    Current value (from the default) = "//build/android/ant/chromium-debug.keystore"
      From //build/config/android/config.gni:105

    The path to the keystore to use for signing builds.

android_libcpp_lib_dir
    Current value (from the default) = ""
      From //build/config/android/config.gni:96

    Libc++ library directory. Override to use a custom libc++ binary.

android_ndk_major_version
    Current value (from the default) = 10
      From //build/config/android/config.gni:86

android_ndk_root
    Current value (from the default) = "//third_party/android_tools/ndk"
      From //build/config/android/config.gni:84

android_ndk_version
    Current value (from the default) = "r10e"
      From //build/config/android/config.gni:85

android_sdk_build_tools_version
    Current value (from the default) = "24.0.2"
      From //build/config/android/config.gni:90

android_sdk_root
    Current value (from the default) = "//third_party/android_tools/sdk"
      From //build/config/android/config.gni:88

android_sdk_version
    Current value (from the default) = "24"
      From //build/config/android/config.gni:89

arm_arch
    Current value (from the default) = ""
      From //build/config/arm.gni:19

    The ARM architecture. This will be a string like "armv6" or "armv7-a".
    An empty string means to use the default for the arm_version.

arm_float_abi
    Current value (from the default) = ""
      From //build/config/arm.gni:28

    The ARM floating point mode. This is either the string "hard", "soft", or
    "softfp". An empty string means to use the default one for the
    arm_version.

arm_fpu
    Current value (from the default) = ""
      From //build/config/arm.gni:23

    The ARM floating point hardware. This will be a string like "neon" or
    "vfpv3". An empty string means to use the default for the arm_version.

arm_optionally_use_neon
    Current value (from the default) = false
      From //build/config/arm.gni:39

    Whether to enable optional NEON code paths.

arm_tune
    Current value (from the default) = ""
      From //build/config/arm.gni:33

    The ARM variant-specific tuning mode. This will be a string like "armv6"
    or "cortex-a15". An empty string means to use the default for the
    arm_version.

arm_use_neon
    Current value (from the default) = ""
      From //build/config/arm.gni:36

    Whether to use the neon FPU instruction set or not.

arm_use_thumb
    Current value (from the default) = true
      From //build/config/arm.gni:43

    Thumb is a reduced instruction set available on some ARM processors that
    has increased code density.

arm_version
    Current value = 7
      From //out.gn/armeabi-v7a/args.gn:6
    Overridden from the default = 6
      From //build/config/arm.gni:15

    Version of the ARM processor when compiling on ARM. Ignored on non-ARM
    platforms.

asan_globals
    Current value (from the default) = true
      From //build/config/sanitizers/sanitizers.gni:140

    Detect overflow/underflow for global objects.
   
    Mac: http://crbug.com/352073

auto_profile_path
    Current value (from the default) = ""
      From //build/config/compiler/BUILD.gn:90

    AFDO (Automatic Feedback Directed Optimizer) is a form of profile-guided
    optimization that GCC supports. It used by ChromeOS in their official
    builds. To use it, set auto_profile_path to the path to a file containing
    the needed gcov profiling data.

binutils_path
    Current value (from the default) = "../../third_party/binutils/Linux_x64/Release/bin"
      From //build/config/compiler/BUILD.gn:41

build_apk_secondary_abi
    Current value (from the default) = true
      From //build/config/android/config.gni:152

    Builds secondary abi for APKs, supports build 32-bit arch as secondary
    abi in 64-bit Monochrome and WebView.

bundle_pool_depth
    Current value (from the default) = -1
      From //build/toolchain/mac/BUILD.gn:29

    Reduce the number of tasks using the copy_bundle_data and compile_xcassets
    tools as they can cause lots of I/O contention when invoking ninja with a
    large number of parallel jobs (e.g. when using distributed build like goma).

cc_wrapper
    Current value (from the default) = ""
      From //build/toolchain/cc_wrapper.gni:36

    Set to "ccache", "icecc" or "distcc".  Probably doesn't work on windows.

chrome_pgo_phase
    Current value (from the default) = 0
      From //build/config/compiler/pgo/pgo.gni:13

    Specify the current PGO phase.
    Here's the different values that can be used:
        0 : Means that PGO is turned off.
        1 : Used during the PGI (instrumentation) phase.
        2 : Used during the PGO (optimization) phase.
   
    TODO(sebmarchand): Add support for the PGU (update) phase.

clang_base_path
    Current value (from the default) = "//third_party/llvm-build/Release+Asserts"
      From //build/config/clang/clang.gni:12

clang_use_chrome_plugins
    Current value (from the default) = false
      From //build/config/clang/clang.gni:10

    Indicates if the build should use the Chrome-specific plugins for enforcing
    coding guidelines, etc. Only used when compiling with Clang.

clang_version
    Current value (from the default) = "5.0.0"
      From //build/toolchain/toolchain.gni:53

    Clang compiler version. Clang files are placed at version-dependent paths.

concurrent_links
    Current value (from the default) = -1
      From //build/toolchain/concurrent_links.gni:19

    Limit the number of concurrent links; we often want to run fewer
    links at once than we do compiles, because linking is memory-intensive.
    The default to use varies by platform and by the amount of memory
    available, so we call out to a script to get the right value.

current_cpu
    Current value (from the default) = ""
      (Internally set; try `gn help current_cpu`.)

current_os
    Current value (from the default) = ""
      (Internally set; try `gn help current_os`.)

custom_toolchain
    Current value (from the default) = ""
      From //build/config/BUILDCONFIG.gn:143

    Allows the path to a custom target toolchain to be injected as a single
    argument, and set as the default toolchain.

dcheck_always_on
    Current value (from the default) = false
      From //build/config/dcheck_always_on.gni:7

    Set to true to enable dcheck in Release builds.

disable_incremental_isolated_processes
    Current value (from the default) = false
      From //build/config/android/config.gni:141

    Disables process isolation when building _incremental targets.
    Required for Android M+ due to SELinux policies (stronger sandboxing).

disable_libfuzzer
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:86

    Helper variable for testing builds with disabled libfuzzer.
    Not for client use.

emma_coverage
    Current value (from the default) = false
      From //build/config/android/config.gni:132

    Enables EMMA Java code coverage. Instruments classes during build to
    produce .ec files during runtime

emma_filter
    Current value (from the default) = ""
      From //build/config/android/config.gni:137

    EMMA filter string consisting of a list of inclusion/exclusion patterns
    separated with whitespace and/or comma. Only has effect if
    emma_coverage==true

enable_dsyms
    Current value (from the default) = false
      From //build/config/mac/symbols.gni:17

    Produce dSYM files for targets that are configured to do so. dSYM
    generation is controlled globally as it is a linker output (produced via
    the //build/toolchain/mac/linker_driver.py. Enabling this will result in
    all shared library, loadable module, and executable targets having a dSYM
    generated.

enable_full_stack_frames_for_profiling
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:49

    Compile in such a way as to make it possible for the profiler to unwind full
    stack frames. Setting this flag has a large effect on the performance of the
    generated code than just setting profiling, but gives the profiler more
    information to analyze.
    Requires profiling to be set to true.

enable_incremental_dx
    Current value (from the default) = false
      From //build/config/android/config.gni:168

    Speed up dexing using dx --incremental.

enable_incremental_javac
    Current value (from the default) = false
      From //build/config/android/config.gni:144

    Speeds up incremental compiles by compiling only changed files.

enable_iterator_debugging
    Current value (from the default) = true
      From //build/config/BUILD.gn:34

    When set (the default) enables C++ iterator debugging in debug builds.
    Iterator debugging is always off in release builds (technically, this flag
    affects the "debug" config, which is always available but applied by
    default only in debug builds).
   
    Iterator debugging is generally useful for catching bugs. But it can
    introduce extra locking to check the state of an iterator against the state
    of the current object. For iterator- and thread-heavy code, this can
    significantly slow execution.

enable_media_router
    Current value (from the default) = true
      From //build/config/features.gni:34

    Enables the Media Router.

enable_nacl
    Current value (from the default) = false
      From //build/config/features.gni:27

    Enables Native Client support.
    Temporarily disable nacl on arm64 linux to get rid of compilation errors.
    TODO(mcgrathr): When mipsel-nacl-clang is available, drop the exclusion.

enable_nacl_nonsfi
    Current value (from the default) = true
      From //build/config/features.gni:31

    Non-SFI is not yet supported on mipsel

enable_precompiled_headers
    Current value (from the default) = true
      From //build/config/pch.gni:11

    Precompiled header file support is by default available,
    but for distributed build system uses (like goma) or when
    doing official builds.

enable_profiling
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:25

    Compile in such a way as to enable profiling of the generated code. For
    example, don't omit the frame pointer and leave in symbols.

enable_resource_whitelist_generation
    Current value (from the default) = false
      From //build/config/android/config.gni:361

    Enables used resource whitelist generation. Set for official builds only
    as a large amount of build output is generated.

enable_stripping
    Current value (from the default) = false
      From //build/config/mac/symbols.gni:24

    Strip symbols from linked targets by default. If this is enabled, the
    //build/config/mac:strip_all config will be applied to all linked targets.
    If custom stripping parameters are required, remove that config from a
    linked target and apply custom -Wcrl,strip flags. See
    //build/toolchain/mac/linker_driver.py for more information.

enable_vulkan
    Current value (from the default) = false
      From //build/config/ui.gni:43

    Enable experimental vulkan backend.

enable_wayland_server
    Current value (from the default) = false
      From //build/config/ui.gni:40

    Indicates if Wayland display server support is enabled.

enable_webvr
    Current value (from the default) = true
      From //build/config/features.gni:78

    Enable WebVR support by default on Android
    Still requires command line flag to access API
    TODO(bshe): Enable for other architecture too. Currently we only support arm
    and arm64.

exclude_unwind_tables
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:64

    Omit unwind support in official builds to save space.
    We can use breakpad for these builds.

fatal_linker_warnings
    Current value (from the default) = true
      From //build/config/compiler/BUILD.gn:79

    Enable fatal linker warnings. Building Chromium with certain versions
    of binutils can cause linker warning.
    See: https://bugs.chromium.org/p/chromium/issues/detail?id=457359

fieldtrial_testing_like_official_build
    Current value (from the default) = false
      From //build/config/features.gni:58

    Set to true make a build that disables activation of field trial tests
    specified in testing/variations/fieldtrial_testing_config_*.json.
    Note: this setting is ignored if is_chrome_branded.

findbugs_verbose
    Current value (from the default) = false
      From //build/config/android/config.gni:118

    Set to true to enable verbose findbugs logging. This does nothing if
    run_findbugs is false.

full_wpo_on_official
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:69

gcc_target_rpath
    Current value (from the default) = ""
      From //build/config/gcc/BUILD.gn:18

    When non empty, overrides the target rpath value. This allows a user to
    make a Chromium build where binaries and shared libraries are meant to be
    installed into separate directories, like /usr/bin/chromium and
    /usr/lib/chromium for instance. It is useful when a build system that
    generates a whole target root filesystem (like Yocto) is used on top of gn,
    especially when cross-compiling.
    Note: this gn arg is similar to gyp target_rpath generator flag.

gdb_index
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:68

    If true, gold linker will save symbol table inside object files.
    This speeds up gdb startup by 60%

gold_path
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:53

    When we are going to use gold we need to find it.
    This is initialized below, after use_gold might have been overridden.

goma_dir
    Current value (from the default) = "/Users/james/goma"
      From //build/toolchain/goma.gni:17

    Absolute directory containing the gomacc binary.

host_cpu
    Current value (from the default) = "x64"
      (Internally set; try `gn help host_cpu`.)

host_os
    Current value (from the default) = "mac"
      (Internally set; try `gn help host_os`.)

host_toolchain
    Current value (from the default) = ""
      From //build/config/BUILDCONFIG.gn:147

    This should not normally be set as a build argument.  It's here so that
    every toolchain can pass through the "global" value via toolchain_args().

icu_use_data_file
    Current value (from the default) = true
      From //third_party/icu/config.gni:15

    Tells icu to load an external data file rather than rely on the icudata
    being linked directly into the binary.
   
    This flag is a bit confusing. As of this writing, icu.gyp set the value to
    0 but common.gypi sets the value to 1 for most platforms (and the 1 takes
    precedence).
   
    TODO(GYP) We'll probably need to enhance this logic to set the value to
    true or false in similar circumstances.

incremental_apk_by_default
    Current value (from the default) = false
      From //build/config/android/config.gni:161

    Build incremental targets whenever possible.
    Ex. with this arg set to true, the chrome_public_apk target result in
    chrome_public_apk_incremental being built.

is_asan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:10

    Compile for Address Sanitizer to find memory bugs.

is_cast_audio_only
    Current value (from the default) = false
      From //build/config/chromecast_build.gni:14

    Set this true for an audio-only Chromecast build.

is_cast_desktop_build
    Current value (from the default) = false
      From //build/config/chromecast_build.gni:26

    True if Chromecast build is targeted for linux desktop. This type of build
    is useful for testing and development, but currently supports only a subset
    of Cast functionality. Though this defaults to true for x86 Linux devices,
    this should be overriden manually for an embedded x86 build.
    TODO(slan): Remove instances of this when x86 is a fully supported platform.

is_cfi
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:57

    Compile with Control Flow Integrity to protect virtual calls and casts.
    See http://clang.llvm.org/docs/ControlFlowIntegrity.html
   
    TODO(pcc): Remove this flag if/when CFI is enabled in all official builds.

is_chrome_branded
    Current value (from the default) = false
      From //build/config/chrome_build.gni:9

    Select the desired branding flavor. False means normal Chromium branding,
    true means official Google Chrome branding (requires extra Google-internal
    resources).

is_chromecast
    Current value (from the default) = false
      From //build/config/chromecast_build.gni:11

    Set this true for a Chromecast build. Chromecast builds are supported on
    Linux and Android.

is_clang
    Current value (from the default) = true
      From //build/config/BUILDCONFIG.gn:138

    Set to true when compiling with the Clang compiler. Typically this is used
    to configure warnings.

is_component_build
    Current value = false
      From //out.gn/armeabi-v7a/args.gn:10
    Overridden from the default = false
      From //build/config/BUILDCONFIG.gn:164

    Component build. Setting to true compiles targets declared as "components"
    as shared libraries loaded dynamically. This speeds up development time.
    When false, components will be linked statically.
   
    For more information see
    https://chromium.googlesource.com/chromium/src/+/master/docs/component_build.md

is_debug
    Current value = false
      From //out.gn/armeabi-v7a/args.gn:1
    Overridden from the default = true
      From //build/config/BUILDCONFIG.gn:154

    Debug build. Enabling official builds automatically sets is_debug to false.

is_desktop_linux
    Current value (from the default) = false
      From //build/config/BUILDCONFIG.gn:134

    Whether we're a traditional desktop unix.

is_java_debug
    Current value (from the default) = false
      From //build/config/android/config.gni:125

    Java debug on Android. Having this on enables multidexing, and turning it
    off will enable proguard.

is_lsan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:13

    Compile for Leak Sanitizer to find leaks.

is_msan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:16

    Compile for Memory Sanitizer to find uninitialized reads.

is_multi_dll_chrome
    Current value (from the default) = false
      From //build/config/chrome_build.gni:13

    Break chrome.dll into multple pieces based on process type. Only available
    on Windows.

is_nacl_glibc
    Current value (from the default) = false
      From //build/config/nacl/config.gni:11

    Native Client supports both Newlib and Glibc C libraries where Newlib
    is assumed to be the default one; use this to determine whether Glibc
    is being used instead.

is_official_build
    Current value (from the default) = false
      From //build/config/BUILDCONFIG.gn:131

    Set to enable the official build level of optimization. This has nothing
    to do with branding, but enables an additional level of optimization above
    release (!is_debug). This might be better expressed as a tri-state
    (debug, release, official) but for historical reasons there are two
    separate flags.

is_syzyasan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:51

    Enable building with SyzyAsan which can find certain types of memory
    errors. Only works on Windows. See
    https://github.com/google/syzygy/wiki/SyzyASanHowTo

is_tsan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:19

    Compile for Thread Sanitizer to find threading bugs.

is_ubsan
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:23

    Compile for Undefined Behaviour Sanitizer to find various types of
    undefined behaviour (excludes vptr checks).

is_ubsan_no_recover
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:26

    Halt the program if a problem is detected.

is_ubsan_null
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:29

    Compile for Undefined Behaviour Sanitizer's null pointer checks.

is_ubsan_security
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:78

    Enables core ubsan security features. Will later be removed once it matches
    is_ubsan.

is_ubsan_vptr
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:32

    Compile for Undefined Behaviour Sanitizer's vptr checks.

is_win_fastlink
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:42

    Tell VS to create a PDB that references information in .obj files rather
    than copying it all. This should improve linker performance. mspdbcmf.exe
    can be used to convert a fastlink pdb to a normal one.

linkrepro_root_dir
    Current value (from the default) = ""
      From //build/config/compiler/compiler.gni:60

    Root directory that will store the MSVC link repro. This should only be
    used for debugging purposes on the builders where a MSVC linker flakyness
    has been observed. The targets for which a link repro should be generated
    should add somethink like this to their configuration:
      if (linkrepro_root_dir != "") {
        ldflags = ["/LINKREPRO:" + linkrepro_root_dir + "/" + target_name]
      }
   
    Note that doing a link repro uses a lot of disk space and slows down the
    build, so this shouldn't be enabled on too many targets.
   
    See crbug.com/669854.

lint_android_sdk_root
    Current value (from the default) = "//third_party/android_tools/sdk"
      From //build/config/android/config.gni:92

lint_android_sdk_version
    Current value (from the default) = "24"
      From //build/config/android/config.gni:93

linux_use_bundled_binutils
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:39

llvm_force_head_revision
    Current value (from the default) = false
      From //build/toolchain/toolchain.gni:37

    If this is set to true, or if LLVM_FORCE_HEAD_REVISION is set to 1
    in the environment, we use the revision in the llvm repo to determine
    the CLANG_REVISION to use, instead of the version hard-coded into
    //tools/clang/scripts/update.py. This should only be used in
    conjunction with setting LLVM_FORCE_HEAD_REVISION in the
    environment when `gclient runhooks` is run as well.

mac_deployment_target
    Current value (from the default) = "10.9"
      From //build/config/mac/mac_sdk.gni:18

    Minimum supported version of OSX.

mac_sdk_min
    Current value (from the default) = "10.10"
      From //build/config/mac/mac_sdk.gni:15

    Minimum supported version of the Mac SDK.

mac_sdk_name
    Current value (from the default) = "macosx"
      From //build/config/mac/mac_sdk.gni:26

    The SDK name as accepted by xcodebuild.

mac_sdk_path
    Current value (from the default) = ""
      From //build/config/mac/mac_sdk.gni:23

    Path to a specific version of the Mac SDK, not including a slash at the end.
    If empty, the path to the lowest version greater than or equal to
    mac_sdk_min is used.

msan_track_origins
    Current value (from the default) = 2
      From //build/config/sanitizers/sanitizers.gni:37

    Track where uninitialized memory originates from. From fastest to slowest:
    0 - no tracking, 1 - track only the initial allocation site, 2 - track the
    chain of stores leading from allocation site to use site.

optimize_for_fuzzing
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:94

    Optimize for coverage guided fuzzing (balance between speed and number of
    branches)

optimize_for_size
    Current value (from the default) = true
      From //build/config/compiler/BUILD.gn:74

    If true, optimize for size. Does not affect windows builds.
    Linux & Mac favor speed over size.
    TODO(brettw) it's weird that Mac and desktop Linux are different. We should
    explore favoring size over speed in this case as well.

pgo_data_path
    Current value (from the default) = ""
      From //build/config/compiler/pgo/pgo.gni:16

    When using chrome_pgo_phase = 2, read profile data from this path.

proguard_verbose
    Current value (from the default) = false
      From //build/config/android/config.gni:121

    Enables verbose proguard output (summaries and unfiltered output).

proprietary_codecs
    Current value (from the default) = false
      From //build/config/features.gni:41

    Enables proprietary codecs and demuxers; e.g. H264, AAC, MP3, and MP4.
    We always build Google Chrome and Chromecast with proprietary codecs.
   
    Note: this flag is used by WebRTC which is DEPSed into Chrome. Moving it
    out of //build will require using the build_overrides directory.

run_findbugs
    Current value (from the default) = false
      From //build/config/android/config.gni:114

    Set to true to run findbugs on JAR targets.

safe_browsing_mode
    Current value (from the default) = 2
      From //build/config/features.gni:50

sanitizer_coverage_flags
    Current value (from the default) = ""
      From //build/config/sanitizers/sanitizers.gni:94

    Value for -fsanitize-coverage flag. Setting this causes
    use_sanitizer_coverage to be enabled.
    Default value when unset and use_afl=true:
    trace-pc
    Default value when unset and use_sanitizer_coverage=true:
        edge,indirect-calls,8bit-counters

strip_absolute_paths_from_debug_symbols
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:97

    Optimize symbol files for maximizing goma cache hit rate.

symbol_level
    Current value = 0
      From //out.gn/armeabi-v7a/args.gn:2
    Overridden from the default = -1
      From //build/config/compiler/compiler.gni:21

    How many symbols to include in the build. This affects the performance of
    the build since the symbols are large and dealing with them is slow.
      2 means regular build with symbols.
      1 means minimal symbols, usually enough for backtraces only.
      0 means no symbols.
      -1 means auto-set according to debug/release and platform.

target_cpu
    Current value = "arm"
      From //out.gn/armeabi-v7a/args.gn:4
    Overridden from the default = ""
      (Internally set; try `gn help target_cpu`.)

target_os
    Current value = "android"
      From //out.gn/armeabi-v7a/args.gn:3
    Overridden from the default = ""
      (Internally set; try `gn help target_os`.)

target_sysroot
    Current value (from the default) = ""
      From //build/config/sysroot.gni:13

    The absolute path of the sysroot that is applied when compiling using
    the target toolchain.

target_sysroot_dir
    Current value (from the default) = ""
      From //build/config/sysroot.gni:16

    The absolute path to directory containing sysroots for linux 32 and 64bit

toolkit_views
    Current value (from the default) = false
      From //build/config/ui.gni:49

treat_warnings_as_errors
    Current value (from the default) = true
      From //build/config/compiler/BUILD.gn:28

    Default to warnings as errors for default workflow, where we catch
    warnings with known toolchains. Allow overriding this e.g. for Chromium
    builds on Linux that could use a different version of the compiler.
    With GCC, warnings in no-Chromium code are always not treated as errors.

use_afl
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:74

    Compile for fuzzing with AFL.

use_allocator
    Current value (from the default) = "none"
      From //build/config/allocator.gni:29

    Memory allocator to use. Set to "none" to use default allocator.

use_ash
    Current value (from the default) = false
      From //build/config/ui.gni:25

    Indicates if Ash is enabled. Ash is the Aura Shell which provides a
    desktop-like environment for Aura. Requires use_aura = true

use_aura
    Current value (from the default) = false
      From //build/config/ui.gni:34

    Indicates if Aura is enabled. Aura is a low-level windowing library, sort
    of a replacement for GDI or GTK.

use_cfi_cast
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:63

    Enable checks for bad casts: derived cast and unrelated cast.
    TODO(krasin): remove this, when we're ready to add these checks by default.
    https://crbug.com/626794

use_cfi_diag
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:67

    By default, Control Flow Integrity will crash the program if it detects a
    violation. Set this to true to print detailed diagnostics instead.

use_clang_static_analyzer
    Current value (from the default) = false
      From //build/toolchain/clang_static_analyzer.gni:10

    Uses the Clang static analysis tools during compilation.

use_custom_libcxx
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:130

use_dbus
    Current value (from the default) = false
      From //build/config/features.gni:63

use_debug_fission
    Current value (from the default) = "default"
      From //build/config/compiler/compiler.gni:37

    use_debug_fission: whether to use split DWARF debug info
    files. This can reduce link time significantly, but is incompatible
    with some utilities such as icecc and ccache. Requires gold and
    gcc >= 4.8 or clang.
    http://gcc.gnu.org/wiki/DebugFission
   
    This is a placeholder value indicating that the code below should set
    the default.  This is necessary to delay the evaluation of the default
    value expression until after its input values such as use_gold have
    been set, e.g. by a toolchain_args() block.

use_drfuzz
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:82

    Compile for fuzzing with Dr. Fuzz
    See http://www.chromium.org/developers/testing/dr-fuzz

use_errorprone_java_compiler
    Current value (from the default) = false
      From //build/config/android/config.gni:128

    Set to true to enable the Errorprone compiler

use_experimental_allocator_shim
    Current value (from the default) = true
      From //build/config/allocator.gni:34

    TODO(primiano): this should just become the default without having a flag,
    but we need to get there first. http://crbug.com/550886 .
    Causes all the allocations to be routed via allocator_shim.cc.

use_external_popup_menu
    Current value (from the default) = true
      From //build/config/features.gni:72

    Whether or not to use external popup menu.

use_gconf
    Current value (from the default) = false
      From //build/config/features.gni:67

    Option controlling the use of GConf (the classic GNOME configuration
    system).

use_gio
    Current value (from the default) = false
      From //build/config/features.gni:69

use_glib
    Current value (from the default) = false
      From //build/config/ui.gni:37

    Whether we should use glib, a low level C utility library.

use_gold
    Current value (from the default) = true
      From //build/config/compiler/compiler.gni:75

    Whether to use the gold linker from binutils instead of lld or bfd.

use_goma
    Current value (from the default) = false
      From //build/toolchain/goma.gni:9

    Set to true to enable distributed compilation using Goma.

use_incremental_wpo
    Current value (from the default) = false
      From //build/config/compiler/compiler.gni:46

    Whether or not we should turn on incremental WPO. Only affects the VS
    Windows build.

use_java8
    Current value (from the default) = false
      From //build/config/android/config.gni:156

    Enables java8 language features (via retrolambda).
    work-in-progress (http://crbug.com/642600)

use_jessie_sysroot
    Current value (from the default) = false
      From //build/config/sysroot.gni:22

    TODO(tonikitoo): Remove this arg when wheezy is finally dropped and we
    can just use debian/jessie everywhere by default. crbug.com/564904.

use_libfuzzer
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:71

    Compile for fuzzing with LLVM LibFuzzer.
    See http://www.chromium.org/developers/testing/libfuzzer

use_lld
    Current value (from the default) = false
      From //build/toolchain/toolchain.gni:23

    Set to true to use lld, the LLVM linker. This flag may be used on Windows
    with the shipped LLVM toolchain, or on Linux with a self-built top-of-tree
    LLVM toolchain (see llvm_force_head_revision in
    build/config/compiler/BUILD.gn).

use_locally_built_instrumented_libraries
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:46

    Use dynamic libraries instrumented by one of the sanitizers instead of the
    standard system libraries. Set this flag to build the libraries from source.

use_order_profiling
    Current value (from the default) = false
      From //build/config/android/config.gni:148

    Adds intrumentation to each function. Writes a file with the order that
    functions are called at startup.

use_ozone
    Current value (from the default) = false
      From //build/config/ui.gni:30

    Indicates if Ozone is enabled. Ozone is a low-level library layer for Linux
    that does not require X11. Enabling this feature disables use of glib, x11,
    Pango, and Cairo. Default to false on non-Chromecast builds.

use_prebuilt_instrumented_libraries
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:42

    Use dynamic libraries instrumented by one of the sanitizers instead of the
    standard system libraries. Set this flag to download prebuilt binaries from
    GCS.

use_rtti
    Current value (from the default) = false
      From //build/config/compiler/BUILD.gn:84

    Build with C++ RTTI enabled. Chromium builds without RTTI by default,
    but some sanitizers are known to require it, like CFI diagnostics
    and UBsan variants.

use_sanitizer_coverage
    Current value (from the default) = false
      From //build/config/sanitizers/sanitizers.gni:135

use_sysroot
    Current value (from the default) = true
      From //build/config/sysroot.gni:18

use_thin_lto
    Current value (from the default) = false
      From //build/toolchain/toolchain.gni:29

    If used with allow_posix_link_time_opt, it enables the experimental support
    of ThinLTO that links 3x-10x faster but (as of now) does not have all the
    important optimizations such us devirtualization implemented. See also
    http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html

use_udev
    Current value (from the default) = false
      From //build/config/features.gni:61

    libudev usage. This currently only affects the content layer.

use_xcode_clang
    Current value (from the default) = false
      From //build/toolchain/toolchain.gni:42

    Compile with Xcode version of clang instead of hermetic version shipped
    with the build. Used on iOS to ship official builds (as they are built
    with the version of clang shipped with Xcode).

v8_android_log_stdout
    Current value (from the default) = false
      From //BUILD.gn:21

    Print to stdout on Android.

v8_can_use_fpu_instructions
    Current value (from the default) = true
      From //BUILD.gn:81

    Similar to vfp but on MIPS.

v8_correctness_fuzzer
    Current value (from the default) = false
      From //gni/v8.gni:10

    Includes files needed for correctness fuzzing.

v8_current_cpu
    Current value (from the default) = "arm"
      From //build/config/v8_target_cpu.gni:60

    This argument is declared here so that it can be overridden in toolchains.
    It should never be explicitly set by the user.

v8_deprecation_warnings
    Current value (from the default) = false
      From //BUILD.gn:30

    Enable compiler warnings when using V8_DEPRECATED apis.

v8_embed_script
    Current value (from the default) = ""
      From //BUILD.gn:36

    Embeds the given script into the snapshot.

v8_enable_backtrace
    Current value (from the default) = ""
      From //gni/v8.gni:26

    Support for backtrace_symbols on linux.

v8_enable_disassembler
    Current value (from the default) = ""
      From //BUILD.gn:39

    Sets -dENABLE_DISASSEMBLER.

v8_enable_gdbjit
    Current value (from the default) = false
      From //BUILD.gn:98

v8_enable_handle_zapping
    Current value (from the default) = false
      From //BUILD.gn:48

    Sets -dENABLE_HANDLE_ZAPPING.

v8_enable_i18n_support
    Current value = false
      From //out.gn/armeabi-v7a/args.gn:8
    Overridden from the default = true
      From //gni/v8.gni:38

    Enable ECMAScript Internationalization API. Enabling this feature will
    add a dependency on the ICU library.

v8_enable_inspector
    Current value (from the default) = true
      From //gni/v8.gni:41

    Enable inspector. See include/v8-inspector.h.

v8_enable_object_print
    Current value (from the default) = ""
      From //BUILD.gn:61

    Sets -dOBJECT_PRINT.

v8_enable_slow_dchecks
    Current value (from the default) = false
      From //BUILD.gn:51

    Enable slow dchecks.

v8_enable_trace_maps
    Current value (from the default) = ""
      From //BUILD.gn:64

    Sets -dTRACE_MAPS.

v8_enable_v8_checks
    Current value (from the default) = ""
      From //BUILD.gn:67

    Sets -dV8_ENABLE_CHECKS.

v8_enable_verify_csa
    Current value (from the default) = false
      From //BUILD.gn:54

    Enable code-generation-time checking of types in the CodeStubAssembler.

v8_enable_verify_heap
    Current value (from the default) = ""
      From //BUILD.gn:24

    Sets -DVERIFY_HEAP.

v8_enable_verify_predictable
    Current value (from the default) = false
      From //BUILD.gn:27

    Sets -DVERIFY_PREDICTABLE

v8_enable_vtunejit
    Current value (from the default) = false
      From //BUILD.gn:45

    Sets -dENABLE_VTUNE_JIT_INTERFACE.

v8_experimental_extra_library_files
    Current value (from the default) = ["//test/cctest/test-experimental-extra.js"]
      From //BUILD.gn:96

v8_extra_library_files
    Current value (from the default) = ["//test/cctest/test-extra.js"]
      From //BUILD.gn:90

    List of extra files to snapshot. They will be snapshotted in order so
    if files export symbols used by later files, they should go first.
   
    This default is used by cctests. Projects using V8 will want to override.

v8_gcmole
    Current value (from the default) = false
      From //gni/v8.gni:20

    Indicate if gcmole was fetched as a hook to make it available on swarming.

v8_has_valgrind
    Current value (from the default) = false
      From //gni/v8.gni:17

    Indicate if valgrind was fetched as a custom deps to make it available on
    swarming.

v8_imminent_deprecation_warnings
    Current value (from the default) = false
      From //BUILD.gn:33

    Enable compiler warnings when using V8_DEPRECATE_SOON apis.

v8_interpreted_regexp
    Current value (from the default) = false
      From //BUILD.gn:58

    Interpreted regexp engine exists as platform-independent alternative
    based where the regular expression is compiled to a bytecode.

v8_multi_arch_build
    Current value (from the default) = false
      From //gni/v8.gni:13

    Adds additional compile target for building multiple architectures at once.

v8_no_inline
    Current value (from the default) = false
      From //BUILD.gn:75

    Switches off inlining in V8.

v8_optimized_debug
    Current value (from the default) = true
      From //gni/v8.gni:23

    Turns on compiler optimizations in V8 in Debug build.

v8_os_page_size
    Current value (from the default) = "0"
      From //BUILD.gn:78

    Override OS page size when generating snapshot

v8_postmortem_support
    Current value (from the default) = false
      From //BUILD.gn:72

    With post mortem support enabled, metadata is embedded into libv8 that
    describes various parameters of the VM for use by debuggers. See
    tools/gen-postmortem-metadata.py for details.

v8_snapshot_toolchain
    Current value (from the default) = ""
      From //snapshot_toolchain.gni:34

    The v8 snapshot needs to be built by code that is compiled with a
    toolchain that matches the bit-width of the target CPU, but runs on
    the host.

v8_static_library
    Current value = true
      From //out.gn/armeabi-v7a/args.gn:11
    Overridden from the default = false
      From //gni/v8.gni:44

    Use static libraries instead of source_sets.

v8_target_cpu
    Current value = "arm"
      From //out.gn/armeabi-v7a/args.gn:5
    Overridden from the default = ""
      From //build/config/v8_target_cpu.gni:33

    This arg is used when we want to tell the JIT-generating v8 code
    that we want to have it generate for an architecture that is different
    than the architecture that v8 will actually run on; we then run the
    code under an emulator. For example, we might run v8 on x86, but
    generate arm code and run that under emulation.
   
    This arg is defined here rather than in the v8 project because we want
    some of the common architecture-specific args (like arm_float_abi or
    mips_arch_variant) to be set to their defaults either if the current_cpu
    applies *or* if the v8_current_cpu applies.
   
    As described below, you can also specify the v8_target_cpu to use
    indirectly by specifying a `custom_toolchain` that contains v8_$cpu in the
    name after the normal toolchain.
   
    For example, `gn gen --args="custom_toolchain=...:clang_x64_v8_arm64"`
    is equivalent to setting --args=`v8_target_cpu="arm64"`. Setting
    `custom_toolchain` is more verbose but makes the toolchain that is
    (effectively) being used explicit.
   
    v8_target_cpu can only be used to target one architecture in a build,
    so if you wish to build multiple copies of v8 that are targetting
    different architectures, you will need to do something more
    complicated involving multiple toolchains along the lines of
    custom_toolchain, above.

v8_test_isolation_mode
    Current value (from the default) = "noop"
      From //gni/isolate.gni:11

    Sets the test isolation mode (noop|prepare|check).

v8_use_external_startup_data
    Current value = false
      From //out.gn/armeabi-v7a/args.gn:9
    Overridden from the default = ""
      From //gni/v8.gni:34

    Use external files for startup data blobs:
    the JS builtins sources and the start snapshot.

v8_use_mips_abi_hardfloat
    Current value (from the default) = true
      From //BUILD.gn:84

    Similar to the ARM hard float ABI but on MIPS.

v8_use_snapshot
    Current value = false
      From //out.gn/armeabi-v7a/args.gn:7
    Overridden from the default = true
      From //gni/v8.gni:30

    Enable the snapshot feature, for fast context creation.
    http://v8project.blogspot.com/2015/09/custom-startup-snapshots.html

